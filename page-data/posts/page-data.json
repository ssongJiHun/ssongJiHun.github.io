{"componentChunkName":"component---src-pages-posts-index-jsx","path":"/posts/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Gatsby를 이용한 개인 블로그 만들기 해당 포스트는 기존 블로그 Velog에서 Gatsby로 마이그레이션 과정을 서술 내용이다. 왜 벨로그에서 게츠비JS로 이전을 하게 되었는지, 어떠한 기술을 사용하였으며, 해당 기술을 채택한 이유, 배포는 어떠한 방식을 통해서 하였는지, 개발 과정 중 React와 차이점 및 트러블 슈팅 마이그레이션 과정 중 레이아웃, 프로젝트 구성 과정과 설계 이유 에 대해서 적을 것입니다.\r\n추가적으로 현재 블로그에 부족한 기능과, 추가될 기능을 나열할 것이다. 카테고리 정리 md 이미지 지원 - src/images 이전 글, 다음 글 md 이미지 지원 - src/images 헤더 설정 SEO, siteMap 다크모드 지원","frontmatter":{"title":"Gatsby 개인블로그 마이그레이션","created":"2023-06-13","category":"","tags":"블로그, Gatsby, React","thumbnail":null}}},{"node":{"excerpt":"지금까지 두 곳의 회사를 다니면서, 프론트엔드의 기술 스택은 와 를 사용했다. 첫 회사는 와 , 두번째 지금 현재의 회사는 와 을 사용한다. 두 개의 프레임워크와 패키지 매니저를 사용해보면서 차이점을 적어 볼려고 한다. Node.js는 자바스크립트를 실행시켜주는 엔진이다. Node.js를 설치하게되면 자동으로 와 이 자동으로 설치된다. 해당 프로젝트에 패키지 매니저를 설치하게되면  폴더가  생성된다. 📌 자바스크립트 패키지 매니저란? 패키지란 npm에 업로드된 노드 모듈을 말한다. 하나의 패키지가 다른 패키지를 사용할 경우 의존 관계를 가지기도 한다. 패키지를 프로젝트에서 사용는 패키지는 의존성 모듈이라고 불리기도 한다. NPM에 등록되어 있는 패키지들을 다운로드, 설치, 업데이트 및 관리 등 많은 과정들을 자동화하여 편리하고 안전하게 수행할 수 있도록 해준다. NPM Yarn은 Node PackageManager이다. 차이점을 찾아보기 위해 구글링을 시도해봤다. 📌 NPM PackageManager 자바스크립트 런타임 환경 Node.js의 **‘기본 패키지 관리자’**이다. 세계의 많은 개발자들이 공유한다. 📌 Yarn PackageManager Yarn은 2016년 페이스북에서 개발한 페키지 관리자이다. 그 당시 Npm을 이용한 패키지 버전 관리가 어려움이 있었고, 불안정성을 해소하기 위해 개발되었다고 한다. 📌 그래서 Npm과 Yarn의 차이점이 뭐야?? 1. 속도 여러개의 의존성 모듈 설치 프로세스 처리하는 방식이 다르다.\r\nNPM은 한 번에 하나씩 순차적으로 설치한다.\r\nYARN은 동시에 설치를 진행하도록한다.\r\n 버전부터는 YARN과 속도 차이가 거의 없다는 견해도 있다. 2. 공유성 다수의 개발자들이 개발에 함께 참여하게되는 상황에서 모든 개발자들이 동일한 개발 환경을 가지는 것이 중요합니다.\r\n이를 위해 파일을 통해 버전을 공유합니다.\r\n하지만 의 범위 지정 방식은 패키지를 가장 최근의 버전의 패키지를 설치하기에 이슈가 발생할 확률이 높습니다.\r\nYarn은 이를 해결하기 위해  파일을 통해 정확하게 버전 정보를 추적합니다.\r\nNPM5.0버전부터는 버전 공유성 이슈를 해결하기 위해서  파일로 사용하고있는 모든 패키지들의 정확한 버전 정보를 추적할 수 있어 안정성 문제도 해결됐습니다. 3. 보안성 가장 중요한 부분이라고 생각할 수도 있습니다. NPM의 장점으로서 뽑히는 의존성이 있는 패키지들을 포함될 수 있도록 하는 코드를 자동으로 실행합니다.\r\n이는 추후 큰 문제를 야기할 수 있는 가능성이 있습니다.\r\n반면에 Yarn은  과  파일에 존재하는 패키지들만 설치를 진행합니다. 그래서 결론은 뭔데??? NPM과 Yarn은 디스크 용량 등 추가적인 차이점이 존재하고 각각의 장단점이 존재하지만, 아직까지는 Yarn이 현업에서 사용하기에는 조금 더 편리한 감이 있는 것 같습니다.\r\nNPM도 지속적으로 업데이트를 하고 있어서 Yarn과 차이는 점차 좁혀질 것으로 생각이 듭니다.\r\n이는 앞으로 NPM이냐 Yarn이냐의 선택은 어떤 패키지 매니저가 최적화를 잘해주냐에 달린 것 같다고 조심스럽게 생각해봅니다… 📌 다음 할 일 다음에는 Yarn berry에 대해 조사해봐야 겠다…\r\n사전 조사로는 Yarn berry를 사용하여 zero install을 할 수 있다고 한다.","frontmatter":{"title":"패키지 매니저 NPM과 YARN 비교","created":"2023-05-26","category":"","tags":"YARN, NPM, Build","thumbnail":null}}},{"node":{"excerpt":"🌈 표현식과 문 값 : 표현식(식)이 평가되어 생성된 결과 (값 ≠ 표현식)이다\r\n리터럴 : 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법이다. 자바스크립트 엔진은 런타임에 리터럴을 평가해 값을 생성한다. 리터럴을 사용하여 다양한 종류의 값을 생성할 수 있다.            등이 존재한다. 📌표현식 표현식은 값으로 평가될 수 있는 문이다. 즉, 변수에 할당 할 수 있는 것으로 생각하면 좋을 것 같다. 📌문 문은 프로그램의 구성하는 기본단위이자 최소 실행단위이다. 문의 집합으로 이뤄진 것이 프로그램이다.\r\n문은 여러가지 토큰으로 구성된다. 토큰이란? 문법적인 의미를 가지며, 문법적으로는 더 이상 나눌 수 없는 기본 요소이다.\r\n키워드, 식별자, 연산자, 리터럴, 세미콜론, 마침표 등의 특수기호는 모두 토큰이다. 📌세미콜론과 자동 삽입 기능 세미콜론은 문의 종료를 나타난대. 자바스크립트는 문에 끝에 붙이는 세미콜론은 옵션이다.\r\n이는 자바스크립트 엔진이 소스코드를 해석할 때 문의 끝이라고 예측되는 지점에 자동으로 붙여주는 세미콜론 자동 삽입 기능(ASI)이 암묵적으로 수행되기 때문이다. 세미콜론을 무조건 붙이자!! 간혹 자동 세미콜론 자동 삽입 기능의 동작과 개발자의 예측이 일치하지 않는 경우.\r\n즉, 개발자가 세미콜론 자동 삽입 기능의 동작을 제대로 예측하지 못해 제대로 사용하지 못하는 경우가 있기 때문이다.","frontmatter":{"title":"책 뿌수기(feat. 모던 자바스크립트 Deep Dive) 5장","created":"2023-05-25","category":"","tags":"JavaScript, ES6, Deep Dive","thumbnail":null}}},{"node":{"excerpt":"🌈 변수(식별자)의 정의 변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위한 붙인 이름이다 메모리 공간의 주소로 치환되어 실행된다, 따라서 개발자가 직접 메모리 주소를 통해 값을 저장하고 참조할 필요없다. 변수를 통해 안전하게 값에 접근한다. 할당(assignment) : 대입 또는 저장\r\n참조(reference) : 변수에 저장된 값을 읽어 들이는 것\r\n 📌 변수의 키워드 변수는    키워드를 사용한다.\r\n자세한 내용은 나중에 알아보자!! 📌 변수의 선언 변수를 선언 이후, 값을 할당하지 않았지만 암묵적으로 으로 할당되어 초기화된다.\r\n자바스크립트의 특징이다. ✔️ 자바스크립트 엔진의 변수 선언 수행 단계 선언단계 : 변수의 이름을  등록해서 자바스크립트 엔진에 변수의 존재를 알림 초기화 단계 : 값을 저장하기 위해 메모리 공간을 확보, 값을 할당하지 않으면 암묵적으로  할당 및 초기화 📌 변수 선언의 실행 시점과 호이스팅 자바스크립트 코드는 인터프리터에 의해 한 줄씩 순차적실행 되서 가 발생할 것처럼 보이지만, 가 출력된다.\r\n그 이유는 변수 선언이 소스코드가 한 줄씩 순차적으로 실행되는 시점(=런타임)이 아니라 그 이전 단계에서 먼저 실행(선언)되기 때문이다. 한 줄씩 순차적으로 실행되기 앞서  평가 과정을 거치면서 자바스크립트 엔진은 변수 선언을 포함된 모든 선언문(변수 선언문, 함수 선언문 등) 소스코드에서 찾아내서 **먼저 실행(선언)**한다. 즉, 변수 선언이 어디에 있는 상관없이 다른 코드보다 먼저 실행하므로 어디서든 변수를 참조할 수 있다. 📌 변수 값의 할당 변수 선언과 값의 할당을 방식2 처럼 단축 표현해도 방식1처럼 2개의 문으로 나누어 각각 실행한다.\r\n즉, 변수 선언은 런타임 이전에 먼저 실행되지만 값의 할당은 런타임에 실행된다. 😂 아래의 코드는 호이스팅의 특징이다. 📌 변수 값의 재할당 재할달이란 이미 값이 할당되어 있는 변수에 새로운 값을 또다시 할당하는 것이다  키워드는 선언과 동시에 로 초기화되기 때문에 엄밀히 말하면 변수에 첨으로 값을 할당하는 것도 사실은 재할당이다. 상수 : 값을 재할당 할 수 없는 변수(식별자) =  📌 네이밍 컨벤션 📌 예약어 예약어는 프로그래밍 언어에서 사용되고 있거나 사용될 예정인 단어를 말한다.\r\nhttps://www.w3bai.com/ko/js/js_reserved.html#gsc.tab=0","frontmatter":{"title":"책 뿌수기(feat. 모던 자바스크립트 Deep Dive) 4장","created":"2023-05-16","category":"","tags":"JavaScript, ES6, Deep Dive","thumbnail":null}}},{"node":{"excerpt":"🌈 자바스크립트란? 웹에서 동작하는 유일한 프로그래밍 언어로, 자바스크립트는 개발자가 별도로 컴파일 작업을 수행하지 않는 인터프리터 언어다. (vs 컴파일 언어)\r\n대부분의 자바스크립트 엔진은 인터프리터와 컴파일러의 장점을 결합해 비교적 처리 속도가 느린 인터프리터의 단점을 해소했다. 자바스크립트는 명령형, 함수형, 프로토타입 기반 객체지향을 지원하는 멀티 패러다임 프로그래밍 언어이다 프로그래머에게 프로그래밍의 관점을 갖게 해 주고 결정하는 역할을 한다 객체지향 프로그래밍, 함수형 프로그래밍 등이 존재한다 자바스크립트는 객체지향 언어보다 프로토타입 기반의 객체지향 언어이다. 프로토타입 언어 프로토타입 기반 언어는 클래스 기반 언어에서 상속을 사용하는 것과는 다르게, 객체를 원형(프로토타입)으로 하는 복제 과정을 통해 객체의 동작 방식을 재사용 할 수 있게 한다. 📌인터프리터 언어의 특징 코드가 실행되는 단계인 런타임에 문 단위로 한 줄씩 중간 코드인 바이트코드로 변환 후 실행한다. 인터프리트 단계와 실행 단계가 분리되어 있지 않다. 인터프리터는 한 줄씩 바이트코드로 변환하고 즉시 실행한다. 코드가 실행될 대마다 인터프리트 과정이 반복 수행된다.(컴파일 언어는 단 한번 수행) 인터프리터 단계와 실행단계가 분리되어 있지 않고 반복 수행되므로 코드 실행 속도가 비교적 느리다. ✔️인터프리터의 단점 극복. 대부분의 모던 브라우저에서 사용되는 인터프리터는 컴파일러 언어처럼 명시적 컴파일 단계를 거치지는 않지만 을 거치며 소스코드를 컴파일하고 실행하여 동적기능 장점을 살리고, 실행 속도가 느린 단점을 극복한다. 📌ES6(ECMAScript 2015)를 브라우저 지원 현황 인터넷 익스플로러를 제외한 모던 브라우저의 ES6 지원 비율은 96%~99%로 높은 비율을 가지고 있지만 구형 브라우저는 ES6를 지원하지는 않는다.\r\n따라서, 지원하지 않는 기능을 사용하거나 구형 브라우저를 고려해야 한다면 **바벨(Babel)**과 같은 트랜스파일러를 사용해 ES6 이상의 사양으로 구현한 소스코드를 ES5 이하의 사양으로 다운그레이드할 필요가 있다.","frontmatter":{"title":"책 뿌수기(feat. 모던 자바스크립트 Deep Dive) 2장","created":"2023-03-14","category":"","tags":"JavaScript, ES6, Deep Dive","thumbnail":null}}},{"node":{"excerpt":"RDBMS(Relational Database Management System) 모든 데이터를 2차원 테이블 형태로 표현한다. 2차원 구조 모델을 기반으로 수평적 구조로 구조를 사용한다.\r\n데이터 중복을 최소화 하며, 일관성, 무결성, 보안성을 유지합니다.\r\n데이블 간의 관계를 가질 수 있다.\r\n정규화를 통해 기본키, 외래키 등을 사용하여 테이블들은 관계를 맺고 여러개의 테이블에 분산됩니다.\r\n정해진(엄격한) 데이터 스키마에 따라 데이터를 저장합니다.\r\n트랜잭션 및 조인이 가능하다. RDBMS - 확장 성능을 확장 시키기 위해서는 만 지원한다.\r\n수직적 확장이란 데이터베이스의 서버를 확장 시키는 것이다.(CPU 성능 업그레이드) RDBMS - 속도 [Update] 중복된 데이터가 없기에 Update를  수행함으로 상대적으로 . [Read] 정해진 데이터 스키마에 따라 저장되있는 데이터를 하여 데이터를 읽어오는 속도가 상대적으로 . NoSQL(Non-relational Database) 모든 데이터가 스키마가 없고, 관계가 없다. 이러한 특징때문에 데이터가 중복되기 때문에 불안정한 측면이 있다.\r\n트랜잭션 및 조인이 불가능하다. NoSQL - 확장 성능을 확장 시키기 위해서는 ,  확장을 지원한다.\r\n수평적 확장이란 기존의 데이터 서버를 두고 동일한 데이터 서버를 확장 및 분산하는  것이다. NoSQL - 속도 [Update]  데이터가 여러 컬렉션에 되어 있어 있다면, Update를 해야하는 경우 모든 컬렉션에서 수행해야하므로 . [Read] 데이터는 사용자가 필요로하는 형식으로 저장하기에 읽어오는 속도가 상대적으로 . 언제 사용하는 것이 좋을까? RDBMS은 언제 사용하는 것이 좋을까? 스키마가 변경될 여지가 없고, 데이터를 자주 수정해야하는 경우\r\n데이터를 사용자의 필요에 따라 조건 또는 정렬이 필요한 경우\r\n데이터 처리의 정확성이 필요한 경우(트랜잭션) NoSQL은 언제 사용하는 것이 좋을까? 정확한 데이터 구조가 없거나 변경 또는 확장이 잦은 경우\r\n데이터 수정하는 경우가 거의 없고, 읽기만 하는 경우\r\n데이터베이스를 수평으로 확장해햐하는 경우(막대한 양의 데이터를 다뤄야 하는 경우) NoSQL 종류 3가지 Key-Value Store Key값으로 Value를 즉시 찾을 수 있도록  데이터 구조를 사용한다. Column Oriented Store MySQL과 같은 RDB는 행 단위로 저장하는 Row Oriented Store다. Document Oriented Store 데이터를 JSON 형태로 저장하는 구조. 그래서 스키마를 바꾸기 쉽다.","frontmatter":{"title":"DB 관계형과 비관계형 비교","created":"2022-11-17","category":"","tags":"DB","thumbnail":null}}},{"node":{"excerpt":"API란? Application Programming Interface의 약자이며, 어플리케이션끼리의 소통을 말한다. HTTP API 란? 말 그대로 HTTP 통신 방식을 사용하는 API를 뜻 한다. REST API 란? Representational State Transfer의 약자로 네트워크 자원을 정의하고 처리하는 방법을 뜻한다. 즉, REST는 HTTP를 잘 활용하기 위한 원칙이라고 할 수 있다.\r\n이 원칙을 준수하여 만든 API가 바로 REST API 이라고 말할 수 있다. 이러한 원칙들을 완벽하게 지키면서 개발하는 것을 RESTful API라고 한다. REST의 제약 조건 Client - Server : 클라이언트와 서버를 분리하여 서로 의존하지 않는다. Stateless : 무상태성이라고 하며, 서버에서는 클라이언트의 요청에 대한 응답만 처리하고 클라이언트의 세션 상태 및 세션 정보를 저장하지 않는다. Cacheable : 캐시 사용이 가능해야하며, 캐시를 사용하는 장점으로는 클라이언트의 데이터를 재사용 할 수 있다. Uniform Interface : 시스템 아키텍처를 간단하고 파악하기 쉽게 정의한 조건이다. 장점으로 클라이언트 개발자와 서버 개발자 간의 결합도를 낮춘다. 4가지 규약 Identification of resources : 리소스가 URL로 식별된다. Manipulation of resources through representations : 소스를 삭제하거나 수정할 때 HTTP 메시지에 이러한 표현을 담아서 전송해야한다. Self-descriptive messages : 메세지는 스스로 설명해야 한다. 메세지만 보고도 어떤 기능을 수행하는지 알 수 있어야 한다. Hypermedia as the engine of application state(HATEOAS) Self-descriptive messages 와 Hypermedia as the engine of application state 이 두 규약이 지키기 힘들다.","frontmatter":{"title":"HTTP API ","created":"2022-11-11","category":"","tags":"Network","thumbnail":null}}},{"node":{"excerpt":"서론 자바스크립트를 이용한 프로젝트를 진행하면서 변수 또는 배열을 복사를 많이 이용한다.\r\n헷갈렸던 깊은 복사와 얕은 복사, 전개연산자 까지 정리한다.\r\n우선 원시형과 참조형에 대해서 알아보자! 원시형과 참조형 이란 자바스크립트에서 객체가 아니면서 메서드도 가지지 않은 데이터입니다. (출처 - MDN) number, string, boolean, null, undefined 등이 해당됩니다. 원시형의 값은 변형할 수 없고(불변성), 재할당을 해야합니다. 위에 코드 처럼 값을 변경한다면 새 메모리 공간을 할당하고 값을 변경합니다.\r\n즉, 원시형은 불변성을 유지하고, 변수는 가리키는 메모리 주소를 바꿔가면서 변수 값을 변경합니다.  이란 자바스크립트에서 원시형이 아닌것들은 모두 참조형입니다. 객체, 배열, 함수가 해당됩니다. 참조형은 변수에 할당할 때는 변수 값이 아닌 주소를 저장합니다.  깊은 복사(Deep copy)란? 독립적인 메모리를 차지한다. 데이터 값 자체를 복사한다. 얕은 복사란? 주소 값을 복사한다. 깊은 복사보다 상대적으로 빠르다. 전개연산자란? 자바스크립트 ES6부터 지원하는 문법이다. 깊은 복사로 적용되어 독립적인 메모리를 차지한다. 정리 깊은 복사는 을 복사한다.\r\n얕은 복사는 를 참조한다.","frontmatter":{"title":"자바스크립트 복사 종류 정리","created":"2022-09-29","category":"","tags":"JavaScript, ES6","thumbnail":null}}},{"node":{"excerpt":"서론 자바스크립트를 이용한 프로젝트를 이용하면서 헷갈렸던 반복문에 대해서 정리한다. iterable iterable은 반복 가능한 객체(iterable object)을 줄여도 부르는 명칭입니다.\r\n자바스크립트의 iterable 객체를 만들어내는 생성자는  , , ,  이 있습니다. for…of for…of는 ES6에 추가된반복문 입니다. 반복 가능한 객체(iterable)를 순회 할 수 있게 해줍니다. 순회하면서 반복 가능한 객체의 값을 반환해줍니다. Object는 불가합니다. for…in Iterable object이면 가능합니다. key를 반환해줍니다. 배열도 가능합니다.(index를 반환) foreach   를 사용하여 루프를 제어 할 수 없습니다. 루프를 제어하기 위해서는 예외처리를 통해서 throw 시키는 방법이 있습니다. 정리 for …of// 반복 가능한 객체 순환 for …in // 객체 순환 foreach // return, break, continue 불가 s","frontmatter":{"title":"자바스크립트 반복문 정리","created":"2022-09-28","category":"","tags":"JavaScript, ES6","thumbnail":null}}},{"node":{"excerpt":"바닐라 자바스크립트에서는 var로 변수 선언을 한다.\r\nES6에서 let과 const 키워드가 나왔다. 차이점 키워드 스코프 중복 선언 재할당 재선언 var 함수 레벨 가능 가능 가능 let 블록 레벨 불가 가능 가능 const 블록 레벨 불가 불가 불가 스코프란? 함수레벨 스코프 - 함수 코드블록 이외에서 선언한 변수는 전역변수로 할당된다. 블록레벨 스코프 - 모든 코드블록 스코프에서 선언한 변수는 지역변수로 할당 된다. 함수 종류 함수 선언문 - 함수 취급O 함수 표현식 - 함수 취급X 함수 생성자 - 함수 취급X 화살표 함수- 함수 취급X 참고 : https://www.howdy-mj.me/javascript/var-let-const/","frontmatter":{"title":"자바스크립트 변수 정리","created":"2022-09-27","category":"","tags":"JavaScript, ES6","thumbnail":null}}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}